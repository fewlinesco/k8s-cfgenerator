CREATED_AT := $(shell date -u +"%Y-%m-%dT%H:%M:%SZ")

DOCKER_BIN := docker

GIT_BIN := git
GIT_OBJECT := HEAD
GIT_REPOSITORY := https://github.com/$(shell $(GIT_BIN) remote get-url origin | sed -e 's/.*://' -e 's/\\.git//')
GIT_SHA := $(shell $(GIT_BIN) rev-parse $(GIT_OBJECT))
GIT_SHORT_SHA := $(shell $(GIT_BIN) rev-parse --short $(GIT_OBJECT))
GIT_BRANCH := $(shell $(GIT_BIN) rev-parse --abbrev-ref $(GIT_OBJECT))

DOCKER_IMAGE := fewlines/cfgenerator
DOCKER_TAG_PREFIX := $(shell if [ $(GIT_BRANCH) = "master" ]; then echo "master"; elif echo $(GIT_BRANCH) | grep -Eo '[0-9]+'; then echo "$$($(GIT_BRANCH) | grep -Eo '[0-9]+')"; else echo "XXXX"; fi)
DOCKER_SHA_IMAGE := $(DOCKER_IMAGE):$(DOCKER_TAG_PREFIX)-$(GIT_SHORT_SHA)
DOCKER_LATEST_IMAGE := $(DOCKER_IMAGE):latest

GO_BIN := go
GO_STATICCHECK_BIN := $(GO_BIN) run ./vendor/honnef.co/go/tools/cmd/staticcheck
GO_FMT_BIN := gofmt
GO_LINT_BIN := $(GO_BIN) run ./vendor/golang.org/x/lint/golint
GO_VERSION := $(shell awk '/^golang / {print $$2}' .tool-versions)

GH_WORKFLOWS_TPL_DIR := .github/workflows
GH_WORKFLOWS_TPL := $(wildcard $(GH_WORKFLOWS_TPL_DIR)/*.yaml.in)
GH_WORKFLOWS := $(GH_WORKFLOWS_TPL:%.in=%)

PHONY: generate-github-workflows docker-build docker-build-short-sha docker-push docker-push-short-sha docker-tag-latest docker-push-latest test test-unit test-fmt test-lint test-staticcheck test-github-workflows

generate-github-workflows: $(GH_WORKFLOWS)

$(GH_WORKFLOWS): %.yaml: %.yaml.in
	@echo "+ generate-github-workflow ($@)"
	@echo "# File generated by make; DO NOT EDIT" > $@
	@sed -e "s/<GO_VERSION>/$(GO_VERSION)/" $< >> $@

$(GH_WORKFLOWS): .tool-versions

docker-build: docker-build-short-sha docker-tag-latest

docker-build-short-sha:
	@echo "+ $@ ($(DOCKER_SHA_IMAGE))"
	@sed -e "s/<GO_VERSION>/$(GO_VERSION)/" Dockerfile.in \
	  | $(DOCKER_BIN) build \
		  --build-arg GIT_REPOSITORY=$(GIT_REPOSITORY) \
		  --build-arg GIT_SHA=$(GIT_SHA) \
		  --build-arg CREATED_AT=$(CREATED_AT) \
		  --tag $(DOCKER_SHA_IMAGE) \
		  --file - \
		  .

docker-push: docker-push-short-sha docker-push-latest

docker-push-short-sha:
	@echo "+ $@ ($(DOCKER_SHA_IMAGE))"
	@$(DOCKER_BIN) push $(DOCKER_SHA_IMAGE)

ifeq ($(GIT_BRANCH), master)
docker-tag-latest:
	@echo "+ $@ ($(DOCKER_LATEST_IMAGE))"
	@docker tag $(DOCKER_SHA_IMAGE) $(DOCKER_LATEST_IMAGE)

docker-push-latest:
	@echo "+ $@ ($(DOCKER_LATEST_IMAGE))"
	@$(DOCKER_BIN) push $(DOCKER_LATEST_IMAGE)
else
docker-tag-latest:
	@echo "+ $@ (skipped)"

docker-push-latest:
	@echo "+ $@ (skipped)"
endif

test: test-unit test-fmt test-lint test-staticcheck test-github-workflows-up-to-date

test-github-workflows-up-to-date: $(GH_WORKFLOWS)
	@for workflow in "$(GH_WORKFLOWS)"; do \
		echo "+ $@ ($${workflow})"; \
		test -z "$$(git diff $${workflow} | tee /dev/stderr)" || \
			( >&2 echo "=> please regenerate github workflows with 'make generate-github-workflows'" && false); \
	done

test-unit:
	@echo "+ $@"
	@$(GO_BIN) test ./...

test-fmt:
	@echo "+ $@"
	@test -z "$$($(GO_FMT_BIN) -l -e -s cmd | tee /dev/stderr)" || \
	  ( >&2 echo "=> please format Go code with '$(GO_FMT_BIN) -s -w .'" && false)

test-lint:
	@echo "+ $@"
	@test -z "$$($(GO_LINT_BIN) ./cmd/... | tee /dev/stderr)"

test-staticcheck:
	@echo "+ $@"
	@$(GO_STATICCHECK_BIN) ./cmd/...

test-tidy:
	@echo "+ $@"
	@$(GO_BIN) mod tidy
	@test -z "$$($(GIT_BIN) status --short go.mod go.sum | tee /dev/stderr)" || \
	  ( >&2 echo "=> please tidy the Go modules with '$(GO_BIN) mod tidy'" && false)
